summary(fitok3)$rse
summary(fitok3)$redse
str(fitok3)
fitok4 <- lm(mpg~factor(am):wt+factor(am):qsec, mtcars)
summary(fitok4)
dfbetas(fit)[1:10,2]
dfbetas(fit)
dfbetas(fitok4)
View(dfbetas(fitok4))
apply(dfbetas(fitok4), 0, max)
apply(dfbetas(fitok4), 2, max)
apply(dfbetas(fitok4)[,2:5], 2, max)
b<-apply(dfbetas(fitok4)[,2:5], 2, max)
b[2]
dfbetas <- dfdebas(fitok4)
big <- apply(dfbeta(fitok4), 2, max)
dfbetas <- dfdetas(fitok4)
big <- apply(dfbeta(fitok4), 2, max)
dfbetas <- dfbetas(fitok4)
big <- apply(dfbeta(fitok4), 2, max)
which(dfbetas[,2]==big[2])
dfbeta[,2]
dfbetas[,2]
which(dfbetas[,2]==big[2])
big[2]
max(dfbetas[,2])
big
big <- apply(dfbeta(fitok4), 1, max)
big
?tapply
tapply(dfbetas, max)
tapply(2:5,dfbetas, max)
tapply(1:5,dfbetas, max)
tapply(1:32,dfbetas, max)
?sapply
?apply
apply(dfbetas, 2, max)
big[2]
big <- apply(dfbeta(fitok4), 2, max)
big
big <- apply(dfbetas(fitok4), 2, max)
big
dfbetas[which(dfbetas[,2]==big[2]),]
which(dfbetas[,2]==big[2])
names(which(dfbetas[,2]==big[2]))
names(c(which(dfbetas[,2]==big[2]), which(dfbetas[,3]==big[3],
which(dfbetas[,4]==big[4]), which(dfbetas[,5]==big[5]))
)
names(c(which(dfbetas[,2]==big[2]), which(dfbetas[,3]==big[3]),
which(dfbetas[,4]==big[4]), which(dfbetas[,5]==big[5])))
big
dfbetas <- dfbetas(fitok4)
big <- apply(dfbetas[,2:5], 2, max)
big
View(dfbetas)
big <- apply(dfbetas[,3:6], 2, max)
dim(dfbetas)
dfbetas <- dfbetas(fitok4)
dim(dfbetas)
names(dfbetas)
head(dfbetas)
big <- apply(dfbetas[,2:5], 2, max)
big
names(big) <- names(c(which(dfbetas[,2]==big[1]), which(dfbetas[,3]==big[2]),
which(dfbetas[,4]==big[3]), which(dfbetas[,5]==big[4])))
big
View(dfbetas)
rm(list=ls())
library(car)
install.packages("car")
library(Car)
library(car)
rm(list=ls())
library(car)
library(swirl)
swirl()
swirl()
var(rpois(1000,50))
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits~date, poisson, hits)
summary(mdl)
confint(mdl, 'date')
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(visits ~ date, poisson, offset=log(visits+1), data=hits)
mdl2 <- glm(visits ~ date, family =poisson, offset=log(visits+1), data=hits)
mdl2 <- glm(simplystats ~ date, family =poisson, offset=log(visits+1), data=hits)
qpois(.95, mdl2$fitted.values[704])
q()
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
library(MASS)
data(shuttle)
rm(list=ls())
data(shuttle)
dim(shuttle)
head(shuttle)
?shuttle
?relevel
?level
?factor
head(as.integer(shuttle$use==auto))
head(as.integer(shuttle$use=="auto"))
s <- as.integer(shuttle$use=="auto")
data <- cbind(shuttle, s)
head(data)
tail(data)
w <- as.integer(shuttle$wind=="head")
data <- cbind(data, w)
head(data)
tail(data)
glm(formula=s~w, family = "binomial", data=data)
mdl <- glm(formula=s~w, family = "binomial", data=data)
exp(mdl$coeff)
sum(exp(mdl$coeff))
exp(sum(exp(mdl$coeff)))/(1+exp(sum(exp(mdl$coeff))))
mdl2 <- glm(s~w+as.factor(magn), family="binomial", data=data)
mdl2
summary(mdl2)
exp(mdl2$coef)
mdl2 <- glm(s~w+as.factor(magn)-1, family="binomial", data=data)
exp(mdl2$coef)
mdl <- glm(formula=s~w-1, family = "binomial", data=data)
exp(mdl$coeff)
mdl <- glm(1-s~w, family = "binomial", data=data)
mdl0 <- glm(s~w, family = "binomial", data=data)
mdl$coef
mdl0$coef
data(InsectSprays)
head(InsectSprays)
glm <- glm(count ~ as.factor(spray), family="poisson", data=InsectSprays)
summary(glm)
glm(count ~ relevel(spray,"B"), data=InsectSprays, family="poisson")
x <- glm(count ~ relevel(spray,"B"), data=InsectSprays, family="poisson")
x$coeff
exp(x$coef[1]-x$coef[2])
exp(x$coef[2]-x$coef[1])
exp(x$coef[2])/exp(x$coef[1])
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
knots <- (0,0)
knots <- c(0,0)
spline <- sapply(knots, function(knot) (x>knot)*(x-knot))
xMat <- cbind(1, x, spline)
yhat <- predict(lm(y~xMat-1))
plot(x,y, frame=FALSE)
lines(x, yhat)
yhat
lm(y~xMat-1)
summary(lm(y~xMat-1))
exp(lm(y~xMat-1)$coef)
m <- lm(y~xMat-1)
m[2]+m[3]
m <- lm(y~xMat-1)$coef
m[2]+m[3]
x <- glm(count ~ relevel(spray,"B"), data=InsectSprays, family="poisson")
> x$coef
x$coef
x$coef[2]
exp(x$coef[2])
q()
library(swirl)
swirl()
install_from_swirl("Statistical Inference")
swirl()
sum(1:6)/6
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sam <- sample(fh, nh*B, replace=TRUE)
resam <- matrix(sam, B, nh)
meds <- apply(resam, 1, median)
median(fh)-median(meds)
sd(meds)
sd(resampledMedians)
quantile(resampledMedians, c(0.025, 0.975))
quantile(meds, c(0.025, 0.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat(BCcounts, group)
testStat()
testStat
obs <- testStat(BCcounts, group)
obs
mean(Bdata$count-Cdata$count)
sample(group)
perms <- sapply(1:10000, function(i) testStat(BCcounts, sample(group)))
mean(perms > obs)
testStat(DEcounts, group)
perms <- apply(1:10000, function(i) testStat(DEcounts, sample(group)))
perms <- sapply(1:10000, function(i) testStat(DEcounts, sample(group)))
q()
rm(list=ls())
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
View(head(AlzheimerDisease))
names(diagnosis)
?AlzheimerDisease
View(head(predictors))
View(head(diagnosis))
adData <- data.frame(diagnosis, predictors)
dim(adData)
dim(predictors)
trainIndex <- createPartition(diagnosis, p=0.5, list=FALSE)
trainIndex <- createDataPartition(diagnosis, p=0.5, list=FALSE)
train <- adData[trainIndex,]
dim(train)
trainIndex <- createDataPartition(diagnosis, p=0.9, list=FALSE)
train <- adData[trainIndex,]
dim(train)
trainIndex <- createDataPartition(diagnosis, p=0.9, list=TRUE)
train <- adData[trainIndex,]
trainIndex <- createDataPartition(diagnosis, p=0.9)
train <- adData[trainIndex,]
dim(trainIndex)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(trainIndex)
summary(inTrain)
?mixtures
View(inTrain)
dim(training)
dim(testing)
View(head(training))
install.packages("Hmisc")
library(Hmisc)
featurePlot(x=training, y=training$CompressiveStregnth, plot="pairs")
y <- cut2(training$CompressiveStrength, g=3)
summary(y)
table(y)
featurePlot(x=training, y=y, plot="pairs")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer)
hist(training$Superplasticizer)
rm(list=ls())
library(caret)
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
M <- abs(cor(training[,-58]))
names(train)[58]
View(head(train))
View(head(training))
diag(M) <- 0
which(M > 0.8, arr.ind=T)
names(spam)[c(34,32)]
plot(spam[,34],spam[,32])
smallSpam <- spam[,c(34,32)]
prComp <- prcomp(smallSpam)
plot(prComp$x[,1],prComp$x[,2])
prComp$rotation
typeColor <- ((spam$type=="spam")*1+1)
prComp <- prcomp(log10(spam[,-58])+1)
prComp <- prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1],prComp$x[,2],col=typeColor,xlab="PC1",ylab="PC2")
preProc <- preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)
spamPC <- predict(preProc, log10(spam[-58]+1))
plot(spamPC[,1],spamPC[,2],col=typeColor)
prComp
preProc
preProc$numComp
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(head(training))
names(training)
index <- grep("^IL",names(training))
index
names(training)[index]
smallTraining <- training[,index]
length(index)
preProc <- preProcess(log10(smallTraining+1),method="pca",pcaComp=2)
preProc <- preProcess(log10(training[,index]+1),method="pca",pcaComp=2)
preProc
trainPC <- predict(preProc, log10(training[,index]+1))
fit <- train(training$diagnosis ~., method="glm",data=trainPC)
sum(is.na(smallTrain))
sum(is.na(smallTraining))
sum(is.na(smallTraining[,1]))
sum(is.na(smallTraining[,2]))
sum(is.na(smallTraining[,1:11]))
sum(is.na(smallTraining[,1:12]))
prComp <- prcomp(log10(smallTraining)+1)
prComp <- prcomp(smallTraining)
preProc <- preProcess(smallTraining, method="pca", pcaComp=2)
preProc
preProc$numComp
preProc$std
preProc$thresh
preProc <- preProcess(smallTraining, method="pca", pcaComp=3)
preProc$thresh
preProc <- preProcess(smallTraining, method="pca", pcaComp=4)
preProc$thresh
preProc <- preProcess(smallTraining, method="pca", pcaComp=4, thresh=0.8)
preProc$numComp
preProc$thresh
trainPC <- predict(preProc, smallTraining)
modelFit <- train(training$diagnosis~., method="glm", data=trainPC)
install.packages("e1071")
library(e1071)
modelFit <- train(training$diagnosis~., method="glm", data=trainPC)
testPC <- predict(preProc, testing)
modelFit <- train(training[, index]$diagnosis~., method="glm", data=trainPC)
preProc <- preProcess(training[,index], method="pca", pcaComp=4, thresh=0.8)
trainPC <- predict(preProc, training[,index])
modelFit <- train(training$diagnosis~., method="glm", data=trainPC)
testPC <- predict(preProc, testing)
testPC <- predict(preProc, testing[, index])
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
preProc
preProc$thresh
preProc <- preProcess(training[,index], method="pca", pcaComp=4, thresh=0.9)
preProc$numComp
preProc <- preProcess(training[,index], method="pca", thresh=0.9)
preProc$numComp
preProc <- preProcess(training[,index], method="pca", thresh=0.8)
preProc$numComp
trainPC <- predict(preProc, training[,index])
modelFit <- train(training$diagnosis~., method="glm", data=trainPC)
testPC <- predict(preProc, testing)
testPC <- predict(preProc, testing[,index])
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
rm(list=ls())
require(gbm); require(rpart); require(plyr)
require(lubridate); require(dplyr); require(caret); require(rattle)
fileURL1 <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
fileURL2 <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
if(!file.exists("pml-training.csv")){
download.file(file1, destfile = "pml-training.csv", method = "curl")
}
if(!file.exists("pml-training.csv")){
download.file(fileURL1, destfile = "pml-training.csv", method = "curl")
}
if(!file.exists("pml-testing.csv")){
download.file(destfile = "pml-testing.csv", method = "curl")
}
if(!file.exists("pml-testing.csv")){
download.file(fileURL2, destfile = "pml-testing.csv", method = "curl")
}
t <- read.csv("pml-training.csv", header = T, na.strings = c("","NA", "#DIV/0!"))
install.packages("installr")
library(installr)
install.Rtools
install.Rtools()
install.packages("knn")
install.packages("shiny")
library(shiny)
updateR()
require(Rtools)
install.packages("installr")
install.packages("installr")
library(installr)
install.Rtools()
require(Rtools)
install.packages("devtools")
library(devtools)
find_rtools()
library(Rtools)
install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
library(shinyApps)
library(shinyapps)
shinyapps::setAccountInfo(name='tianzih',
token='7A7A89A08FFF4D1B72155B20994C034A',
secret='<SECRET>')
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
shinyapps::setAccountInfo(name='tianzih',
token='7A7A89A08FFF4D1B72155B20994C034A',
secret='gcMI8Pf+6NBXyF/pNZjC/6Bg37MFSfW7sE7NB6GW')
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
library(shinyapps)
install_github("ropensci/plotly")
library(devtools)
install_github("ropensci/plotly")
library(plotly)
set_credentials_file("tianzi", "0jfreg0du7")
ggiris <- qplot(Petal.Width, Sepal.Length, data = iris, color = Species)
ggiris
py <- plotly()
r <- py$ggplotly(ggiris)
r$response$url
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(rCharts)
load(airquality)
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
q()
ls
lm()
lm
predict
colSums
dgamma
install.packages("DDPQuiz3")
library(DDPQuiz3)
library(devtools)
install.packages("DDPQuiz3")
library(RTools)
Sys.getenv('PATH')
system('g++ -v')
system('where make')
install.packages("RMySQL")
library(RMySQL)
uscsDb <- dbConnect(MySQL(), user="genome", )
uscsDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb)
result <- dbGetQuery(ucscDb, "show databases"); dbDisconnect(ucscDb)
result <- dbGetQuery(uscsDb, "show databases"); dbDisconnect(ucscDb)
result <- dbGetQuery(uscsDb, "show databases"); dbDisconnect(uscsDb)
result
head(result)
vignette()
vignette("RMySQL")
vignette("GoogleVis")
vignettes("GoogleVis")
vignette(package="GoogleVis")
vignette("hcl-colors")
install.packages('RMySQL',type='source')
library(RMySQL)
library(RMySQL)
Sys.getenv('MYSQL_HOME')
R.home()
library(lubridate)
?isoweek
?week
?isoweek
x <- ymd("2012-03-26")
week(x)
week(x) <- 1
x
isoweek(1)
isoweek(x)
x <- ymd("2012-03-26")
isoweek(x)
x <- ymd("2014-05-18")
isoweek(x)
x <- ymd("2015-01-17")
x <- ymd("2015-01-5")
isoweek(x)
x <- ymd("2015-01-4")
isoweek(x)
library(rJava)
gsub("^'|-", "", "'s")
gsub("^'|-", "", "-s")
rm(list=ls())
setwd("./R15/capstone")
library(shiny)
runApp()
runApp()
runApp()
runApp()
?p
?textOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
q()
